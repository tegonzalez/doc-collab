// src/lib/db/index.ts
// SQLite database interaction logic
import * as Sqlite from 'better-sqlite3';
import path from 'path';
import fs from 'fs';

// Define options type for better-sqlite3 constructor
interface SqliteOptions {
    readonly?: boolean;
    fileMustExist?: boolean;
    timeout?: number;
    verbose?: (...args: any[]) => void; // eslint-disable-line @typescript-eslint/no-explicit-any
    nativeBinding?: string;
}

// Define the expected constructor type using the interface
type SqliteConstructorType = new (path: string, options?: SqliteOptions) => Sqlite.Database;

// Initialize database connection
const DB_PATH = process.env.DB_PATH || path.join(process.cwd(), 'data', 'collabflow.db');

// Ensure the data directory exists
const dataDir = path.dirname(DB_PATH);
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
  console.log('Created data directory at ' + dataDir);
}

let db: Sqlite.Database;

// Define specific options (or leave empty object if none needed)
const dbOptions: SqliteOptions = { 
    // verbose: console.log // Uncomment for verbose logging if needed
};

try {
  // Use the defined SqliteConstructorType
  db = new (Sqlite.default as unknown as SqliteConstructorType)(DB_PATH, dbOptions);
  console.log('SQLite database connected at ' + DB_PATH);
} catch (error) {
  console.error('Failed to connect to SQLite database:', error);
  throw error;
}

// Initialize database schema if needed
const initializeSchema = () => {
  const userTableExistsStmt = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='users'");
  const userTableExists = userTableExistsStmt.get();

  if (!userTableExists) {
    console.log('Initializing database schema...');
    db.exec(`
      CREATE TABLE users (
        id INTEGER PRIMARY KEY AUTOINCREMENT, -- Use standard integer primary key
        display_name TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
      );

      CREATE TABLE auth_tokens (
        token TEXT PRIMARY KEY,
        user_id INTEGER NOT NULL, 
        type TEXT NOT NULL CHECK(type IN ('link', 'session')), -- link or session
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        expires_at TIMESTAMP NOT NULL,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
      );

      CREATE TABLE user_ssh_keys (
          key_id TEXT PRIMARY KEY, -- e.g., fingerprint or unique id
          user_id INTEGER NOT NULL,
          public_key TEXT NOT NULL,
          name TEXT, -- Optional user-provided name for the key
          added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
      );

      CREATE TABLE projects (
          id TEXT PRIMARY KEY, -- UUID generated by application
          name TEXT NOT NULL,
          repo_hash TEXT UNIQUE NOT NULL, -- Hash used for directory name
          created_by INTEGER NOT NULL, 
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
          FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
      );

      CREATE TABLE ssh_permissions (
          permission_id INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id TEXT NOT NULL, 
          project_id TEXT NOT NULL,
          permission_level TEXT NOT NULL CHECK(permission_level IN ('R', 'RW', 'RW+')), -- Read, Read/Write, Read/Write+Delete/ForcePush
          granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
          FOREIGN KEY (key_id) REFERENCES user_ssh_keys(key_id) ON DELETE CASCADE,
          FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
          UNIQUE (key_id, project_id) -- Ensure only one permission level per key per project
      );

      -- Add initial Admin user (assuming ID 1 for simplicity, adjust if needed)
      INSERT INTO users (id, display_name) VALUES (1, 'Admin');
    `);
    console.log('Database schema initialized.');
  } 
  // Add check for auth_tokens table (as it was added later)
  const authTokensTableExistsStmt = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='auth_tokens'");
  if (!authTokensTableExistsStmt.get()) {
      console.log('Creating auth_tokens table...');
      db.exec(`
        CREATE TABLE auth_tokens (
          token TEXT PRIMARY KEY,
          user_id INTEGER NOT NULL, 
          type TEXT NOT NULL CHECK(type IN ('link', 'session')), 
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
          expires_at TIMESTAMP NOT NULL,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        );
      `);
      console.log('auth_tokens table created.');
  }
  // Add checks for other potentially missing tables if schema evolved
  const keysTableExistsStmt = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='user_ssh_keys'");
  if (!keysTableExistsStmt.get()) {
      console.log('Creating user_ssh_keys table...');
      db.exec(`
          CREATE TABLE user_ssh_keys (
              key_id TEXT PRIMARY KEY, 
              user_id INTEGER NOT NULL,
              public_key TEXT NOT NULL,
              name TEXT,
              added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
              FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
          );
      `);
      console.log('user_ssh_keys table created.');
  }
  const projectsTableExistsStmt = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='projects'");
  if (!projectsTableExistsStmt.get()) {
      console.log('Creating projects table...');
      db.exec(`
          CREATE TABLE projects (
              id TEXT PRIMARY KEY, 
              name TEXT NOT NULL,
              repo_hash TEXT UNIQUE NOT NULL, 
              created_by INTEGER NOT NULL, 
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
              FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
          );
      `);
      console.log('projects table created.');
  }
   const permissionsTableExistsStmt = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='ssh_permissions'");
  if (!permissionsTableExistsStmt.get()) {
      console.log('Creating ssh_permissions table...');
      db.exec(`
          CREATE TABLE ssh_permissions (
              permission_id INTEGER PRIMARY KEY AUTOINCREMENT,
              key_id TEXT NOT NULL, 
              project_id TEXT NOT NULL,
              permission_level TEXT NOT NULL CHECK(permission_level IN ('R', 'RW', 'RW+')), 
              granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
              FOREIGN KEY (key_id) REFERENCES user_ssh_keys(key_id) ON DELETE CASCADE,
              FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
              UNIQUE (key_id, project_id) 
          );
      `);
      console.log('ssh_permissions table created.');
  }

};

initializeSchema();

export { db };

console.log("Placeholder: src/lib/db/index.ts loaded");
